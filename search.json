[
  {
    "objectID": "get-started.html",
    "href": "get-started.html",
    "title": "Get started with agate",
    "section": "",
    "text": "This page is meant to help you get started with agate by getting it properly ‘installed’ on your MATLAB path, setting up the necessary configuration files and folder structure, and a quick start guide for some basic commands.\nIt page is not a detailed list of all available functions and their specific documentation (that might be coming later!). Those details are available within the standard MATLAB-type documentation in the header of each function and include a detailed description, info on input and output arguments, and examples. These details can be pulled up by typing doc function or help function within the MATLAB Command Window."
  },
  {
    "objectID": "get-started.html#installation",
    "href": "get-started.html#installation",
    "title": "Get started with agate",
    "section": "Installation",
    "text": "Installation\nSee the Dependencies section of the home page for more info on the required Mathworks File Exchange packages (copies of these come packaged with agate) and MATLAB Toolbox requirements.\n\nDownload agate from GitHub\n\nOption 1: Download the latest release\n\nThis option ensures a stable release and removes the requirement of working with GitHub but will need manual updating\nVisit the Releases page and download the latest release source code as a zip or tar.gz file\n\nOption 2: Clone the repository using GitHub or GitHub Desktop\n\nThis package is actively being developed and the easiest way stay up to date with the latest improvements is to regularly check for updates from GitHub, but this comes with risks as it may be buggy\nClick on the green Code button and select Open with GitHub Desktop\nSpecify where to clone the cloned local copy. Suggest the default MATLAB directory (e.g., C:\\Users\\User.Name\\Documents\\MATLAB\\)\nFor more help with GitHub see this Git Started Doc\n\nOption 3: Download the repository as a zip file\n\nThis provides the latest functionality before an official release and removes requirement of working with GitHub but will need manual updating\nClick the green Code button at the landing page of the repository and choose Download ZIP\nUnzip the downloaded folder and place within the default MATLAB directory (e.g., C:\\Users\\User.Name\\Documents\\MATLAB\\)\n\n\nAdd agate to the MATLAB path\n\nOpen MATLAB and click on Set Path in the Environment section of the Home tab (Figure 1)\nIn the Set Path dialog box, choose Add with Subfolders…, select the agate-public folder, and click Save, then Close (Figure 2)\nThis will now be saved for future MATLAB sessions, but would need to be repeated for any installation on a new computer\n\n\n\n\n\nFigure 1: Screenshot of MATLAB Home Tab showing where to click to Set Path\n\n\n\n\n\nFigure 2: Example screenshot of the Set Pat dialog box showing the ‘Add with Subfolders...’ and ‘Save’ buttons.\n\n\nBack to top"
  },
  {
    "objectID": "get-started.html#quick-start-guide",
    "href": "get-started.html#quick-start-guide",
    "title": "Get started with agate",
    "section": "Quick Start Guide",
    "text": "Quick Start Guide\n\nCreate configuration files\nRunning agate requires a few configuration files. Both of these are plain text files that end with .cnf and can be edited in any text editor or in MATLAB’s Editor window\n\nAn overview mission configuration file for a specific glider/mission\nA basestation configuration file with SSH login info\n\n\nMission configuration file\nAn example configuration file is located in the ‘agate/settings’ folder: agate_config_example.cnf\nLines starting with % are comments. The configuration file has settings for the glider and mission, paths to relevant input and output folders, map extent and plotting settings, and acoustic system settings. The top section is required to initialize agate and use the most basic functions. The following sections are optional depending on what agate functionality is desired, including interfacing with the basestation, working with acoustic data outputs, and plotting maps. Save this file with a unique name for each glider and mission. Descriptions of each configuration item are included in the example file as comments.\nTo suggest additional configuration items, please open an issue.\n\n\nBasestation configuration file\nThe path and filename for basestation configuration file is specified in the mission configuration file. An example is located in the ‘agate/settings’ folder: basestation.cnf.\nThis is a separate configuration file that typically does not change between missions and gliders, and contains potentially sensitive information for the SSH connection to a research group’s basestation. This file should be stored somewhere central and safe, preferably outside of the GitHub repository for security reasons. This file must contain the following lines, with the inputs updated for a particular basestation:\nCONFIG.bs.host = 'url.com';\nCONFIG.bs.username = 'pilot';\nCONFIG.bs.password = 'PsWrD';\nBack to top\n\n\n\nSet up folder structure\nThe suggested folder structure for working with agate is to specify a ‘mission’ folder, and then within that have a standardized set of nested folders for the various agate inputs and outputs. The path of the ‘mission’ folder is specified by CONFIG.path.mission in the mission configuration file and typically follows the Seaglider naming scheme (e.g., C:\\Users\\User.Name\\Desktop\\sg###_Location_MonYYYY).\nWithin that, should be a ‘flightStatus’ and a ‘basestationFiles’ folder; ‘flightStatus’ will house output figures and tables, and ‘basestationFiles’ is where downloaded basestation files will be saved.\nThese folders can be set up manually, or created in MATLAB:\n% specify the local piloting folder for this trip\npath_status = fullfile(CONFIG.path.mission, 'flightStatus'); % where to store status outputs \npath_bsLocal = fullfile(CONFIG.path.mission, 'basestationFiles'); % local copy of basestation files\n\n% make the dirs if they don't exist\nmkdir(path_status);\nmkdir(path_bsLocal);\nBack to top\n\n\nInitialize agate\n\nOpen MATLAB\nAdd agate to the path (with subfolders), if not already done\nType agate agate_config.cnf in the command window and hit enter\n\nreplace agate_config.cnf with the name of your configuration file (e.g., agate_config_sg639_MHI_Apr2022.cnf)\nif the configuration file is located within the agate/settings folder, just the name is sufficient. If it is located elsewhere, specify the fullfile path (e.g., C:/Users/User.Name/Desktop/agate_config_sgXXX.cnf)\n\nAlternatively, simply type agate and you will be prompted to select a configuration file\n\nBack to top\n\n\nDownload all basestation files\nUse downloadBasestationFiles to automatically download various basestation files to a local machine for further examination.\nBelow is example code to run this step. This can be saved as a script that makes it easy to re-run each time the glider surfaces, or it can be typed directly into the MATLAB Command Window.\n% ensure agate folder is added to the matlab path before proceeding\n% initialize agate; will prompt for configuration file\nagate\n\n% load global configs\nglobal CONFIG\n\n% specify the local piloting folder for this trip\npath_status = fullfile(CONFIG.path.mission, 'flightStatus'); % where to store status outputs \npath_bsLocal = fullfile(CONFIG.path.mission, 'basestationFiles'); % local copy of basestation files\n% make the dirs if they don't exist\nmkdir(path_status);\nmkdir(path_bsLocal);\n\n% download basestation files\ndownloadBasetationFiles(CONFIG, path_bsLocal)\nBack to top\n\n\nExtract select piloting parameters and flight metrics\n%% extract various piloting parameters and values reported by .log file\n\npp = extractPilotingParams(CONFIG, path_bsLocal, path_status);\n% print errors for quick glance/check\npp.ERRORS(end)\n\n% save as .xlsx and .mat \nwritetable(pp, fullfile(path_status, ['diveTracking_' CONFIG.glider '.xlsx'])); % local copy\nsave(fullfile(path_status, ['diveTracking_' CONFIG.glider '.mat']), 'pp');\n\nBack to top"
  },
  {
    "objectID": "plotting-functions.html",
    "href": "plotting-functions.html",
    "title": "Plots",
    "section": "",
    "text": "Basic details for each plotting function are available within the standard MATLAB-type documentation in the header of each function and include a detailed description, info on input and output arguments, and examples. These details can be pulled up by typing doc function or help function within the MATLAB Command Window.\nThis page will show example plots and provide a bit more detail."
  },
  {
    "objectID": "plotting-functions.html#initialization",
    "href": "plotting-functions.html#initialization",
    "title": "Plots",
    "section": "Initialization",
    "text": "Initialization\nTo run any of the agate plotting functions, the toolbox must be initialized with a configuration file.\nNo configuration file yet? Go back to Get started - Create configuration files. At a minimum, the configuration file must include the top required portion, as well as the optional - plotting section.\n% ensure agate is on the path\n\n% initialize with specified configuration file, 'agate_config.cnf'\nagate agate_config.cnf\n\n% initialize with prompt to select configuration file\nagate\nMost of the plotting functions rely on a pp (piloting parameters) variable that is a large table with various outputs from the .nc and .log files compiled in one place. If this has already be created, it can be loaded directly. If not, use extractPilotingParams to build it.\n% load existing pp table\nload(fullfile(CONFIG.path.mission, 'flightStatus', ['diveTracking_' CONFIG.glider '.mat']))\n\n% create new pp table\npp = extractPilotingParams(CONFIG, fullfile(CONFIG.path.mission, 'basestationFiles'), ...\nfullfile(CONFIG.path.mission, 'flightStatus'), 0);\n% zero as last argument creates it from scratch (does not load any previous tables)\nsave(fullfile(CONFIG.path.mission, 'flightStatus', ['diveTracking_' CONFIG.glider '.mat']), 'pp');\nBack to top"
  },
  {
    "objectID": "plotting-functions.html#piloting-plots",
    "href": "plotting-functions.html#piloting-plots",
    "title": "Plots",
    "section": "Piloting plots",
    "text": "Piloting plots\n\nBattery remaining and PAM free space\n\n\nHumidity and pressure\n\n\nVoltage use by device\n\n\nVoltage use by device, normalized by dive duration\n\n\nMinimum voltage reported\n\n\nMaps\nBack to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "agate",
    "section": "",
    "text": "A collection of tools to be used for piloting acoustic gliders, processing glider positional and environmental data, and analyzing glider-collected acoustic data for surveys of marine mammals.\nThis is the public release version and it is very much under development.\n Last Update: 15 May 2023\n\n\nThese tools were initially developed for use with passive acoustic glider surveys conducted by the OSU/NOAA CIMERS Bioacoustics Lab bioacoustics.us and as part of my PhD. Initial development was for surveys using Seaglider platforms and either the Wideband Intelligent Signal Processor and Recorder (WISPR) or PMAR-XL recording systems.\nThrough NOAA’s Uncrewed Systems Initiative (UxS) we received funding to develop and improve these tools into a more broadly applicable and user-friendly tool box that could be used by all interested in conducting glider-based passive acoustic surveys for marine mammals.\nReady? Get started\nPlease contact me if you have any questions, feedback, or suggestions!\nselene [dot] fregosi [at] noaa.gov or Report an issue on GitHub\n\n\n\nFigure 1: diagram showing the different components of agate\n\n\n\n\n\nMatlab toolboxes:\n\nMapping Toolbox\n\nagate requires the Matlab Mapping toolbox. In the future, we may try modify the mapping tools to work with the freely available m_map package to make it more accessible, but are not there yet!\n\n\nThis package requires a few resources from Matlab File Exchange. They come packaged within the utils/fileExchange folder. More info about each can be found below:\n\nSSH/SFTP/SCP For Matlab (v2)\nDavid Freedman (2023). SSH/SFTP/SCP For Matlab (v2), MATLAB Central File Exchange. Retrieved April 24, 2023.\nLatLon Distance\nM Sohrabinia (2023). LatLon distance, MATLAB Central File Exchange. Retrieved April 24, 2023. \ncmocean\nThyng, Kristen, et al. “True Colors of Oceanography: Guidelines for Effective and Accurate Colormap Selection.” Oceanography, vol. 29, no. 3, The Oceanography Society, Sept. 2016, pp. 9–13, doi:10.5670/oceanog.2016.66.\nseawater_density\nGabriel Ruiz-Martinez (2023). Seawater density from salinity, temperature and pressure, MATLAB Central File Exchange. Retrieved April 24, 2023. \n\nBasemap rasters:\nA raster file is needed to plot bathymetry data on any of the maps. Detailed basemaps are available from NCEI.\nDepending on the needed resolution, the 60 arc second .tiff file may be sufficient, and is a reasonable size for download and plotting, but is a bit slow to load. Alternatively, finer resolution (15-60 arc second resolution options) for the specific area of interest can be extracted using the ETOPO Grid Extract tool to download .tiff files in a smaller file size for faster loading and plotting.\n\n\n\nThe scientific results and conclusions, as well as any views or opinions expressed herein, are those of the author(s) and do not necessarily reflect the views of NOAA or the Department of Commerce.\nThis repository is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is provided on an ‘as is’ basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by DOC or the United States Government.\nSoftware code created by U.S. Government employees is not subject to copyright in the United States (17 U.S.C. §105). The United States/Department of Commerce reserves all rights to seek and obtain copyright protection in countries other than the United States for Software authored in its entirety by the Department of Commerce. To this end, the Department of Commerce hereby grants to Recipient a royalty-free, nonexclusive license to use, copy, and create derivative works of the Software outside of the United States."
  },
  {
    "objectID": "index.html#background",
    "href": "index.html#background",
    "title": "agate",
    "section": "",
    "text": "These tools were initially developed for use with passive acoustic glider surveys conducted by the OSU/NOAA CIMERS Bioacoustics Lab bioacoustics.us and as part of my PhD. Initial development was for surveys using Seaglider platforms and either the Wideband Intelligent Signal Processor and Recorder (WISPR) or PMAR-XL recording systems.\nThrough NOAA’s Uncrewed Systems Initiative (UxS) we received funding to develop and improve these tools into a more broadly applicable and user-friendly tool box that could be used by all interested in conducting glider-based passive acoustic surveys for marine mammals.\nReady? Get started\nPlease contact me if you have any questions, feedback, or suggestions!\nselene [dot] fregosi [at] noaa.gov or Report an issue on GitHub\n\n\n\nFigure 1: diagram showing the different components of agate"
  },
  {
    "objectID": "index.html#dependencies",
    "href": "index.html#dependencies",
    "title": "agate",
    "section": "",
    "text": "Matlab toolboxes:\n\nMapping Toolbox\n\nagate requires the Matlab Mapping toolbox. In the future, we may try modify the mapping tools to work with the freely available m_map package to make it more accessible, but are not there yet!\n\n\nThis package requires a few resources from Matlab File Exchange. They come packaged within the utils/fileExchange folder. More info about each can be found below:\n\nSSH/SFTP/SCP For Matlab (v2)\nDavid Freedman (2023). SSH/SFTP/SCP For Matlab (v2), MATLAB Central File Exchange. Retrieved April 24, 2023.\nLatLon Distance\nM Sohrabinia (2023). LatLon distance, MATLAB Central File Exchange. Retrieved April 24, 2023. \ncmocean\nThyng, Kristen, et al. “True Colors of Oceanography: Guidelines for Effective and Accurate Colormap Selection.” Oceanography, vol. 29, no. 3, The Oceanography Society, Sept. 2016, pp. 9–13, doi:10.5670/oceanog.2016.66.\nseawater_density\nGabriel Ruiz-Martinez (2023). Seawater density from salinity, temperature and pressure, MATLAB Central File Exchange. Retrieved April 24, 2023. \n\nBasemap rasters:\nA raster file is needed to plot bathymetry data on any of the maps. Detailed basemaps are available from NCEI.\nDepending on the needed resolution, the 60 arc second .tiff file may be sufficient, and is a reasonable size for download and plotting, but is a bit slow to load. Alternatively, finer resolution (15-60 arc second resolution options) for the specific area of interest can be extracted using the ETOPO Grid Extract tool to download .tiff files in a smaller file size for faster loading and plotting."
  },
  {
    "objectID": "index.html#disclaimer",
    "href": "index.html#disclaimer",
    "title": "agate",
    "section": "",
    "text": "The scientific results and conclusions, as well as any views or opinions expressed herein, are those of the author(s) and do not necessarily reflect the views of NOAA or the Department of Commerce.\nThis repository is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is provided on an ‘as is’ basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by DOC or the United States Government.\nSoftware code created by U.S. Government employees is not subject to copyright in the United States (17 U.S.C. §105). The United States/Department of Commerce reserves all rights to seek and obtain copyright protection in countries other than the United States for Software authored in its entirety by the Department of Commerce. To this end, the Department of Commerce hereby grants to Recipient a royalty-free, nonexclusive license to use, copy, and create derivative works of the Software outside of the United States."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html#heading-2",
    "href": "about.html#heading-2",
    "title": "About",
    "section": "Heading 2",
    "text": "Heading 2\nRegular text\n\nHeading 3\nRegular text\n\nHeading 4\nRegular text\n\nHeading 5\nRegular text\n\nHeading 6\nRegular text"
  },
  {
    "objectID": "configuration.html",
    "href": "configuration.html",
    "title": "Configuration file guide",
    "section": "",
    "text": "More detail coming!\nBack to top"
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "Development of this toolbox was funded by:\nInitial development - National Defense Science and Engineering Graduate (NDSEG) Fellowship to S. Fregosi’s PhD, Oregon State University\nFurther development - NOAA’s Uncrewed Systems Research Transition Office Grant awarded to Pacific Islands Fisheries Science Center and Oregon State University\n\n\n\nFigure 1: Testing and ballasting of SG639 in a saltwater tank before deployment"
  }
]